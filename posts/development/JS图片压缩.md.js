webpackJsonp([113],{551:function(n,s){n.exports={content:["article",["p","\u5728\u4e0a\u4f20\u56fe\u7247\u4e4b\u524d\uff0c\u5bf9\u56fe\u7247\u6587\u4ef6\u8fdb\u884c\u538b\u7f29\u540e\u518d\u4e0a\u4f20\uff0c\u539f\u7406\u662f\u5229\u7528canvas\u7ed8\u5236\u7f29\u653e\u540e\u7684\u56fe\u7247\uff0c\u7136\u540e\u518d\u4ececanvas\u83b7\u53d6\u76ee\u6807\u56fe\u7247\u8fdb\u884c\u4e0a\u4f20\u3002"],["pre",{lang:"javascript",highlighted:'<span class="token comment" spellcheck="true">// \u56fe\u7247\u538b\u7f29</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> imageCompressor <span class="token punctuation">(</span>file<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\n        <span class="token comment" spellcheck="true">// \u6587\u4ef6\u540d\u548c\u6587\u4ef6\u7c7b\u578b</span>\n        <span class="token keyword">const</span> <span class="token punctuation">{</span> name<span class="token punctuation">,</span> type <span class="token punctuation">}</span> <span class="token operator">=</span> file\n        <span class="token comment" spellcheck="true">// \u5c06\u56fe\u7247\u8f6c\u5316\u4e3acanvas</span>\n        <span class="token comment" spellcheck="true">// \u5c06\u56fe\u7247\u6587\u4ef6\u8f6c\u5316\u4e3a\u56fe\u7247</span>\n        <span class="token keyword">const</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n        reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n        reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token comment" spellcheck="true">// \u521b\u5efa\u56fe\u7247</span>\n            <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Image</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n            image<span class="token punctuation">.</span>src <span class="token operator">=</span> event<span class="token punctuation">.</span>target<span class="token punctuation">.</span>result\n            image<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token comment" spellcheck="true">// \u56fe\u7247\u7684\u539f\u59cb\u5c3a\u5bf8</span>\n                <span class="token keyword">const</span> imageWidth <span class="token operator">=</span> image<span class="token punctuation">.</span>width\n                <span class="token keyword">const</span> imageHeight <span class="token operator">=</span> image<span class="token punctuation">.</span>height\n                <span class="token keyword">const</span> ratio <span class="token operator">=</span> imageWidth <span class="token operator">/</span> imageHeight\n                <span class="token comment" spellcheck="true">// console.log(imageWidth, imageHeight, ratio)</span>\n                <span class="token comment" spellcheck="true">// \u538b\u7f29\u540e\u7684\u5c3a\u5bf8</span>\n                <span class="token keyword">let</span> compressWidth <span class="token operator">=</span> imageWidth\n                <span class="token keyword">let</span> compressHeight <span class="token operator">=</span> imageHeight\n                <span class="token comment" spellcheck="true">// \u5f53\u56fe\u7247\u5c3a\u5bf8\u8d85\u8fc7\u4e00\u5b9a\u503c\u65f6\u624d\u8fdb\u884c\u538b\u7f29</span>\n                <span class="token keyword">const</span> maxWidth <span class="token operator">=</span> <span class="token number">1920</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>imageWidth <span class="token operator">></span> maxWidth<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    compressWidth <span class="token operator">=</span> maxWidth\n                    compressHeight <span class="token operator">=</span> maxWidth <span class="token operator">/</span> ratio\n                    <span class="token comment" spellcheck="true">// console.log(compressWidth, compressHeight)</span>\n                    <span class="token comment" spellcheck="true">// \u4ee5canvas\u4e3a\u8f7d\u4f53\u53bb\u83b7\u53d6\u538b\u7f29\u540e\u7684\u56fe\u7247</span>\n                    <span class="token keyword">var</span> canvasDom <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">\'canvas\'</span><span class="token punctuation">)</span>\n                    <span class="token keyword">var</span> canvas <span class="token operator">=</span> canvasDom<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token string">"2d"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    canvasDom<span class="token punctuation">.</span>width <span class="token operator">=</span> compressWidth\n                    canvasDom<span class="token punctuation">.</span>height <span class="token operator">=</span> compressHeight\n                    canvasDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>width <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>compressWidth<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span>\n                    canvasDom<span class="token punctuation">.</span>style<span class="token punctuation">.</span>height <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>compressHeight<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">px`</span></span>\n                    <span class="token comment" spellcheck="true">// document.querySelector(\'body\').appendChild(canvasDom)</span>\n                    canvas<span class="token punctuation">.</span>width <span class="token operator">=</span> compressWidth<span class="token punctuation">;</span>\n                    canvas<span class="token punctuation">.</span>height <span class="token operator">=</span> compressHeight<span class="token punctuation">;</span>\n                    <span class="token comment" spellcheck="true">// console.log(canvasDom, canvas)</span>\n                    canvas<span class="token punctuation">.</span><span class="token function">drawImage</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> compressWidth<span class="token punctuation">,</span> compressHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                    <span class="token comment" spellcheck="true">// \u628acanvas\u8f6c\u6362\u6210\u56fe\u7247\u6587\u4ef6</span>\n                    <span class="token comment" spellcheck="true">// \u5c06canvas\u8f6c\u6362\u6210dataURL</span>\n                    <span class="token keyword">const</span> dataURL <span class="token operator">=</span> canvas<span class="token punctuation">.</span>canvas<span class="token punctuation">.</span><span class="token function">toDataURL</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span>\n                    <span class="token comment" spellcheck="true">// \u5c06dataURL\u8f6c\u6362\u6210blob</span>\n                    <span class="token keyword">const</span> arr <span class="token operator">=</span> dataURL<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">\',\'</span><span class="token punctuation">)</span>\n                    <span class="token keyword">const</span> mime <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex">/:(.*?);/</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>\n                    <span class="token keyword">const</span> bStr <span class="token operator">=</span> <span class="token function">atob</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>\n                    <span class="token keyword">let</span> n <span class="token operator">=</span> bStr<span class="token punctuation">.</span>length\n                    <span class="token keyword">const</span> u8arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n                    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    u8arr<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> bStr<span class="token punctuation">.</span><span class="token function">charCodeAt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">const</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>u8arr<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> mime <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                    <span class="token comment" spellcheck="true">// blob\u8f6cfile</span>\n                    <span class="token keyword">var</span> fileImage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">[</span>blob<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token punctuation">{</span> type<span class="token punctuation">:</span> type<span class="token punctuation">,</span> lastModified<span class="token punctuation">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>\n                    <span class="token function">resolve</span><span class="token punctuation">(</span>fileImage<span class="token punctuation">)</span>\n                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                    <span class="token function">resolve</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>'},["code","// \u56fe\u7247\u538b\u7f29\nexport function imageCompressor (file) {\n    return new Promise((resolve, reject) => {\n        // \u6587\u4ef6\u540d\u548c\u6587\u4ef6\u7c7b\u578b\n        const { name, type } = file\n        // \u5c06\u56fe\u7247\u8f6c\u5316\u4e3acanvas\n        // \u5c06\u56fe\u7247\u6587\u4ef6\u8f6c\u5316\u4e3a\u56fe\u7247\n        const reader = new FileReader()\n        reader.readAsDataURL(file)\n        reader.onload = function(event){\n            // \u521b\u5efa\u56fe\u7247\n            var image = new Image()\n            image.src = event.target.result\n            image.onload = function(){\n                // \u56fe\u7247\u7684\u539f\u59cb\u5c3a\u5bf8\n                const imageWidth = image.width\n                const imageHeight = image.height\n                const ratio = imageWidth / imageHeight\n                // console.log(imageWidth, imageHeight, ratio)\n                // \u538b\u7f29\u540e\u7684\u5c3a\u5bf8\n                let compressWidth = imageWidth\n                let compressHeight = imageHeight\n                // \u5f53\u56fe\u7247\u5c3a\u5bf8\u8d85\u8fc7\u4e00\u5b9a\u503c\u65f6\u624d\u8fdb\u884c\u538b\u7f29\n                const maxWidth = 1920\n                if (imageWidth > maxWidth) {\n                    compressWidth = maxWidth\n                    compressHeight = maxWidth / ratio\n                    // console.log(compressWidth, compressHeight)\n                    // \u4ee5canvas\u4e3a\u8f7d\u4f53\u53bb\u83b7\u53d6\u538b\u7f29\u540e\u7684\u56fe\u7247\n                    var canvasDom = document.createElement('canvas')\n                    var canvas = canvasDom.getContext(\"2d\");\n                    canvasDom.width = compressWidth\n                    canvasDom.height = compressHeight\n                    canvasDom.style.width = `${compressWidth}px`\n                    canvasDom.style.height = `${compressHeight}px`\n                    // document.querySelector('body').appendChild(canvasDom)\n                    canvas.width = compressWidth;\n                    canvas.height = compressHeight;\n                    // console.log(canvasDom, canvas)\n                    canvas.drawImage(image, 0, 0, compressWidth, compressHeight);\n                    // \u628acanvas\u8f6c\u6362\u6210\u56fe\u7247\u6587\u4ef6\n                    // \u5c06canvas\u8f6c\u6362\u6210dataURL\n                    const dataURL = canvas.canvas.toDataURL(type)\n                    // \u5c06dataURL\u8f6c\u6362\u6210blob\n                    const arr = dataURL.split(',')\n                    const mime = arr[0].match(/:(.*?);/)[1]\n                    const bStr = atob(arr[1])\n                    let n = bStr.length\n                    const u8arr = new Uint8Array(n)\n                    while (n--) {\n                    u8arr[n] = bStr.charCodeAt(n)\n                    }\n                    const blob = new Blob([u8arr], { type: mime })\n                    // blob\u8f6cfile\n                    var fileImage = new File([blob], name, { type: type, lastModified: Date.now() })\n                    resolve(fileImage)\n                } else {\n                    resolve(file)\n                }\n            }\n        }\n    })\n}"]]],meta:{title:"JS\u56fe\u7247\u538b\u7f29",publishDate:"2020-06-03T00:00:00.000Z",createDate:"2020-06-03T00:00:00.000Z",category:"development",abstract:"JS\u56fe\u7247\u538b\u7f29",filename:"posts/development/JS\u56fe\u7247\u538b\u7f29.md"}}}});