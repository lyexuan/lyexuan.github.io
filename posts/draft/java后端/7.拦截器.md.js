webpackJsonp([97],{596:function(n,s){n.exports={content:["article",["h1","\u5b9a\u4e49"],["pre",{lang:null,highlighted:'import jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletRequest<span class="token comment" spellcheck="true">;</span>\nimport jakarta<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span>HttpServletResponse<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Component<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>HandlerInterceptor<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ModelAndView<span class="token comment" spellcheck="true">;</span>\n\n<span class="token variable">@Component</span>\npublic class AuthInterceptor implements HandlerInterceptor {\n    <span class="token variable">@Override</span>\n    public boolean <span class="token function">preHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">)</span> throws Exception {\n        String tokenFromHeader <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        String tokenFromParams <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"token"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n        String token <span class="token operator">=</span> tokenFromHeader !<span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">?</span> tokenFromHeader <span class="token punctuation">:</span> tokenFromParams<span class="token comment" spellcheck="true">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>token !<span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> {\n            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n            return <span class="token boolean">true</span><span class="token comment" spellcheck="true">;</span>\n        } <span class="token keyword">else</span> {\n            return <span class="token boolean">false</span><span class="token comment" spellcheck="true">;</span>\n        }\n    }\n\n    <span class="token variable">@Override</span>\n    public void <span class="token function">postHandle</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> ModelAndView modelAndView<span class="token punctuation">)</span> throws Exception {\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"auth valid pass"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }\n\n    <span class="token variable">@Override</span>\n    public void <span class="token function">afterCompletion</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> HttpServletResponse response<span class="token punctuation">,</span> Object handler<span class="token punctuation">,</span> Exception ex<span class="token punctuation">)</span> throws Exception {\n        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"auth valid finish"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }\n}'},["code",'import jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport org.springframework.stereotype.Component;\nimport org.springframework.web.servlet.HandlerInterceptor;\nimport org.springframework.web.servlet.ModelAndView;\n\n@Component\npublic class AuthInterceptor implements HandlerInterceptor {\n    @Override\n    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {\n        String tokenFromHeader = request.getHeader("token");\n        String tokenFromParams = request.getParameter("token");\n        String token = tokenFromHeader != null ? tokenFromHeader : tokenFromParams;\n        if (token != null) {\n            System.out.println(token);\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    @Override\n    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {\n        System.out.println("auth valid pass");\n    }\n\n    @Override\n    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {\n        System.out.println("auth valid finish");\n    }\n}']],["h1","\u4f7f\u7528"],["pre",{lang:null,highlighted:'import com<span class="token punctuation">.</span>lyexuan<span class="token punctuation">.</span>sb1<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span>AuthInterceptor<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>InterceptorRegistry<span class="token comment" spellcheck="true">;</span>\nimport org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>config<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>WebMvcConfigurer<span class="token comment" spellcheck="true">;</span>\n\n<span class="token variable">@Configuration</span>\npublic class WebConfig implements WebMvcConfigurer {\n    <span class="token variable">@Autowired</span>\n    private AuthInterceptor authInterceptor<span class="token comment" spellcheck="true">;</span>\n\n    <span class="token variable">@Override</span>\n    public void <span class="token function">addInterceptors</span><span class="token punctuation">(</span>InterceptorRegistry registry<span class="token punctuation">)</span> {\n        registry<span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>authInterceptor<span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">addPathPatterns</span><span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>\n                <span class="token punctuation">.</span><span class="token function">excludePathPatterns</span><span class="token punctuation">(</span><span class="token string">"/api/login"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">;</span>\n    }\n}'},["code",'import com.lyexuan.sb1.interceptor.AuthInterceptor;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\n\n@Configuration\npublic class WebConfig implements WebMvcConfigurer {\n    @Autowired\n    private AuthInterceptor authInterceptor;\n\n    @Override\n    public void addInterceptors(InterceptorRegistry registry) {\n        registry.addInterceptor(authInterceptor)\n                .addPathPatterns("/**")\n                .excludePathPatterns("/api/login");\n    }\n}']]],meta:{filename:"posts/draft/java\u540e\u7aef/7.\u62e6\u622a\u5668.md"}}}});